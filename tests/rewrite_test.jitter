// Works
binary $ {
    fn display_both_u32(lhs: u32, rhs: u32) {
        print_u32(lhs);
        print_u32(rhs);
    }
}

// Works
unary ` {
    fn display_one_i32(i: i32) {
        print_i32(i);
    }
}

// Works
struct JitterStruct {
    a: u32,
    pub b: i32,
}

// Works
extern {
    fn print_i32(n: i32);
    fn print_u32(n: u32);
    fn hello_from_rust(n: u32);
}

// Works
fn custom_operators() {
    // becomes `display_both_u32(3, 4)`
    3_u32 $ 4_u32;

    // becomes `display_one_i32(23)`
    `23_i32;
}

// Works
// `func` -> `fn`
func custom_lex_callback() {
    // `hello_there` -> `hello_from_rust(123_u32);`
    hello_there
}

// Works
#define hello_again hello_from_rust(456_u32);
#define no_definition
// Works
#include "libtest.jitter"
// Works
func preprocessing() {
    let from_imported = imported_fn();
    print_u32(from_imported);

    no_definition
    hello_again
}

// Works
fn FFI(a: u32) {
    hello_from_rust(a);
}

// Works
fn test() -> i32 {
    let x = -2_i32;
    // x = -4_i32;

    x
}

// Works
fn params(a: u32, b: u32) -> u32 {
    b
}

// Works
fn structs(a: u32, b: i32) -> i32 {
    let x = JitterStruct {
        a,
        b,
    };

    x.b = 7_i32;

    x.b
}

// Works
fn struct_return(a: u32, b: i32) -> JitterStruct {
    print_u32(a);
    print_i32(b);

    JitterStruct {
        a,
        b,
    }
}

// Works
fn function_call1() -> i32 {
    test()
}

// Works
fn ret_u32() -> u32 {
    77_u32
}

// Works, but requires hack (move the nested function return value into local stack slot)
fn function_call2() -> JitterStruct {
    struct_return(ret_u32(), test())
}