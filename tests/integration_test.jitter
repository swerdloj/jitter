// NOTE: This file serves as a continuous feature-integration test.
// As new functionality is added to the compiler, this file
// will grow to test that functionality.

// TODO: static, const, @ tags
// TODO: Implement and test out hot-reloading
// @persistent
// static mut TEST: u32 = 0;

// trait Trait {
//     fn test(&self) -> u8;
// }

// TODO: Trait impls
// impl Trait for Test {
//     fn test(&self) -> u8 { 
//         self.a
//     }
// }

// TODO: Type impls
// impl Test {
//     fn add_one(&mut self) {
//         self.a += 1;
//         self.b += 1;
//         self.c += 1;
//     }
// }

// TODO: structs
// fn structs(a: Test) -> Test {
//     let mut test = Test {
//         a: 1,
//         b: 2,
//         c: 3,
//     };

//     test.b = 7;
//     test.add_one();

//     return test;
// }

// TODO: Modules
// use libtest;
// fn module_test() {
//     libtest::pub_test();
// }

// TODO: Will this always be C-style?
extern {
    fn hello_from_rust(number: i32);
}

// Function definition order does not matter
fn function_calls(a: i32) -> i32 {
    let mut call_result = multiply(2_i32, 3_i32);
    call_result += multiply(3_i32, 4_i32);

    let x: () = no_return();
    // hello_from_rust(12_i32);

    call_result + a
}

struct Test {
    a: i8,
    b: u16,
    c: u16,
}

// TODO: Custom type returns
// fn FFI_test(a: i8, b: u16, c: u16) -> Test {
//     Test { a, b, c }
// }

fn no_return() {
    let x = 7.2_f32;
}

fn specified_literals() -> i8 {
    Test {
        a: -16_i8 + 3i8,
        b: 123u16 + 7u16,
        c: 3___2_1____u16,
    }.a
}

fn struct_test(a: i8, b: u16, c: u16) -> u16 {
    let x = Test {
        a,
        b,
        c,
    };

    (x.b + x.c) * b
}

// TODO: Tuples
// let y: (i32, u32);

fn multiply(a: i32, b: i32) -> i32 {
    a * b
}

fn negate(a: i32) -> i32 {
    -a
}

// TODO: Infer literal types
// fn return_12i32() -> i32 {
//     return 12;
// }

fn aliasing() -> Test {
    // Requires stack allocation
    let x = Test {
        a: 1_i8,
        b: 2_u16,
        c: 3_u16,
    };

    // let test1 = x.a;
    
    // Uses x's allocation (y is alias of x)
    let mut y = x;
    y = Test {
        a: 4_i8,
        b: 5_u16,
        c: 6_u16,
    };

    // Requires struct-return stack allocation
    let mut z = Test {
        a: 7_i8,
        b: 8_u16,
        c: 9_u16,
    };

    // y is now an alias of z now. Not x anymore.
    y = z;

    // let test2 = y.b;

    // Must return the struct-return stack slot's address
    y
}

// TODO: struct-return slot usage
// fn struct_returns() {
//     let x = aliasing();
//     x.a;
// }

// TODO: Moves
// fn move_invalid() {
//     // x is new u32 -> allocate x
//     let mut x = 12_u32;
//     // y is an alias of x -> point use x's allocation -> mark x as moved
//     let y = x;

//     // NOTE: Once non-lexical lifetimes are implemented, this will be perfectly valid
//     //       as the move will end once y's lifetime ends

//     // use of moved value -> error
//     x += 2_u32;
// }

// TODO: Moves
// fn move_valid() {
//     // x is new u32 -> allocate x
//     let mut x = 12_u32;
//     // x is used for calculation, but not moved
//     let y = x + 1_u32;

//     // both x and y are valid
//     x += 2_u32;
// }

// TODO: Block expressions as base expressions
// fn moves() {
//     let mut x = 7;
//     {
//         let mut y = x;
//         // invalid
//         x += 1;
//     }
//     // valid
//     x += 1;
// }